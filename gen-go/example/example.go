// Code generated by Thrift Compiler (0.15.0). DO NOT EDIT.

package example

import (
	"bytes"
	"context"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

// Attributes:
//  - UserName
//  - FavouriteNumber
//  - Interests
type Person struct {
  UserName string `thrift:"userName,1" db:"userName" json:"userName"`
  FavouriteNumber *int64 `thrift:"favouriteNumber,2" db:"favouriteNumber" json:"favouriteNumber,omitempty"`
  Interests []string `thrift:"interests,3" db:"interests" json:"interests"`
}

func NewPerson() *Person {
  return &Person{}
}


func (p *Person) GetUserName() string {
  return p.UserName
}
var Person_FavouriteNumber_DEFAULT int64
func (p *Person) GetFavouriteNumber() int64 {
  if !p.IsSetFavouriteNumber() {
    return Person_FavouriteNumber_DEFAULT
  }
return *p.FavouriteNumber
}

func (p *Person) GetInterests() []string {
  return p.Interests
}
func (p *Person) IsSetFavouriteNumber() bool {
  return p.FavouriteNumber != nil
}

func (p *Person) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Person)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserName = v
}
  return nil
}

func (p *Person)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FavouriteNumber = &v
}
  return nil
}

func (p *Person)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Interests =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.Interests = append(p.Interests, _elem0)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Person) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Person"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Person) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "userName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.UserName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userName: ", p), err) }
  return err
}

func (p *Person) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetFavouriteNumber() {
    if err := oprot.WriteFieldBegin(ctx, "favouriteNumber", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:favouriteNumber: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.FavouriteNumber)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.favouriteNumber (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:favouriteNumber: ", p), err) }
  }
  return err
}

func (p *Person) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "interests", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:interests: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Interests)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Interests {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:interests: ", p), err) }
  return err
}

func (p *Person) Equals(other *Person) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.UserName != other.UserName { return false }
  if p.FavouriteNumber != other.FavouriteNumber {
    if p.FavouriteNumber == nil || other.FavouriteNumber == nil {
      return false
    }
    if (*p.FavouriteNumber) != (*other.FavouriteNumber) { return false }
  }
  if len(p.Interests) != len(other.Interests) { return false }
  for i, _tgt := range p.Interests {
    _src1 := other.Interests[i]
    if _tgt != _src1 { return false }
  }
  return true
}

func (p *Person) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Person(%+v)", *p)
}

